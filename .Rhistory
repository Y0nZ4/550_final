test_statistic = (point_estimate -0 )/se_hat
#Multiply by 2 because doing a two-sided test
pt(test_statistic, df = nrow(cc_data)-2, lower.tail=F)*2
se_hat
# 95% ci
point_estimate = sqft_cost_model$coefficients["(Intercept)"]
se_hat = summary(sqft_cost_model)$coefficients["(Intercept)","Std. Error"]
#Construct the upper and lower confience limits
ci_int_llim = point_estimate - critical_value * se_hat
summary(sqft_cost_model)
critical_value=qt(0.975,df=nrow(cc_data)-1)
# 95% ci
point_estimate = sqft_cost_model$coefficients["(Intercept)"]
se_hat = summary(sqft_cost_model)$coefficients["(Intercept)","Std. Error"]
#Construct the upper and lower confience limits
ci_int_llim = point_estimate - critical_value * se_hat
ci_int_ulim = point_estimate- critical_value * se_hat
# 95% ci
point_estimate = sqft_cost_model$coefficients["(Intercept)"]
se_hat = summary(sqft_cost_model)$coefficients["(Intercept)","Std. Error"]
#Construct the upper and lower confience limits
ci_int_llim = point_estimate - critical_value * se_hat
ci_int_ulim = point_estimate- critical_value * se_hat
# 95% ci
point_estimate = sqft_cost_model$coefficients["(Intercept)"]
se_hat = summary(sqft_cost_model)$coefficients["(Intercept)","Std. Error"]
#Construct the upper and lower confience limits
ci_int_llim = point_estimate - critical_value * se_hat
ci_int_ulim = point_estimate- critical_value * se_hat
print(paste("(",round(ci_int_llim,2),",",round(ci_int_ulim,2),")"))
# Or
confint(sqft_cost_model,level=0.95)
# 95% ci
point_estimate = sqft_cost_model$coefficients["(Intercept)"]
se_hat = summary(sqft_cost_model)$coefficients["(Intercept)","Std. Error"]
#Construct the upper and lower confience limits
ci_int_llim = point_estimate - critical_value * se_hat
ci_int_ulim = point_estimate + critical_value * se_hat
print(paste("(",round(ci_int_llim,2),",",round(ci_int_ulim,2),")"))
# Or
confint(sqft_cost_model,level=0.95)
#New dataset
home_2000sqft = tibble(home_sqft=2000)
predict(sqft_cost_model, newdata=home_2000sqft,interval = "confidence",level=0.95)
#Change the level from 0.95 to 0.99 if a 99% prediction interval want to be obtained.
source("~/.active-rstudio-document", echo=TRUE)
1/sqrt(2*pi)
1/sqrt(2*pi)*exp(1/2)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
num.sim = 10
sample.size = 5
sim.means = 0*(1:num.sim)
for (i in 1:num.sim) {
test = runif(sample.size,0,1)
sim.means[i] = mean(test)
}
hist(sim.means)
sd=qrt(1/(12 * sample.size))
num.sim = 10
sample.size = 5
sim.means = 0*(1:num.sim)
for (i in 1:num.sim) {
test = runif(sample.size,0,1)
sim.means[i] = mean(test)
}
hist(sim.means)
sd=sqrt(1/(12 * sample.size))
curve(dnorm(x,mean=0.5,sd=sd),add=T,col="red")
num.sim = 10
sample.size = 5
sim.means = 0*(1:num.sim)
for (i in 1:num.sim) {
test = runif(sample.size,0,1)
sim.means[i] = mean(test)
}
hist(sim.means)
sd=sqrt(1/(12 * sample.size))
curve(dnorm(x,mean=0.5,sd=sd),add=T,col="red")
num.sim = 100
sample.size = 5
sim.means = 0*(1:num.sim)
for (i in 1:num.sim) {
test = runif(sample.size,0,1)
sim.means[i] = mean(test)
}
hist(sim.means)
sd=sqrt(1/(12 * sample.size))
curve(dnorm(x,mean=0.5,sd=sd),add=T,col="red")
?curve
?dnorm
num.sim = 10
sample.size = 5
sim.means = 0*(1:num.sim)
for (i in 1:num.sim) {
test = runif(sample.size,0,1)
sim.means[i] = mean(test)
}
hist(sim.means)
sd=sqrt(1/(12 * sample.size))
curve(dnorm(0.5,mean=0.5,sd=sd),add=T,col="red")
num.sim = 10
sample.size = 5
sim.means = 0*(1:num.sim)
for (i in 1:num.sim) {
test = runif(sample.size,0,1)
sim.means[i] = mean(test)
}
hist(sim.means)
sd=sqrt(1/(12 * sample.size))
curve(dnorm(x,mean=0.5,sd=sd),add=T,col="red")
num.sim = 100
sample.size = 5
sim.means = 0*(1:num.sim)
for (i in 1:num.sim) {
test = runif(sample.size,0,1)
sim.means[i] = mean(test)
}
hist(sim.means)
sd=sqrt(1/(12 * sample.size))
curve(dnorm(x,mean=0.5,sd=sd),add=T,col="red")
num.sim = 10
sample.size = 5
sim.means = 0*(1:num.sim)
for (i in 1:num.sim) {
test = runif(sample.size,0,1)
sim.means[i] = mean(test)
}
hist(sim.means,probability=T)
sd=sqrt(1/(12 * sample.size))
curve(dnorm(x,mean=0.5,sd=sd),add=T,col="red")
num.sim = 100
sample.size = 5
sim.means = 0*(1:num.sim)
for (i in 1:num.sim) {
test = runif(sample.size,0,1)
sim.means[i] = mean(test)
}
hist(sim.means,probability=T)
sd=sqrt(1/(12 * sample.size))
curve(dnorm(x,mean=0.5,sd=sd),add=T,col="red")
par(mfrow=c(2,2))
num.sim = 10
sample.size = 5
sim.means = 0*(1:num.sim)
for (i in 1:num.sim) {
test = runif(sample.size,0,1)
sim.means[i] = mean(test)
}
hist(sim.means,probability=T)
sd=sqrt(1/(12 * sample.size))
curve(dnorm(x,mean=0.5,sd=sd),add=T,col="red")
num.sim = 100
sample.size = 5
sim.means = 0*(1:num.sim)
for (i in 1:num.sim) {
test = runif(sample.size,0,1)
sim.means[i] = mean(test)
}
hist(sim.means,probability=T)
sd=sqrt(1/(12 * sample.size))
curve(dnorm(x,mean=0.5,sd=sd),add=T,col="red")
num.sim = 1000
sample.size = 5
sim.means = 0*(1:num.sim)
for (i in 1:num.sim) {
test = runif(sample.size,0,1)
sim.means[i] = mean(test)
}
hist(sim.means,probability=T)
sd=sqrt(1/(12 * sample.size))
curve(dnorm(x,mean=0.5,sd=sd),add=T,col="red")
num.sim = 10000
sample.size = 5
sim.means = 0*(1:num.sim)
for (i in 1:num.sim) {
test = runif(sample.size,0,1)
sim.means[i] = mean(test)
}
hist(sim.means,probability=T)
sd=sqrt(1/(12 * sample.size))
curve(dnorm(x,mean=0.5,sd=sd),add=T,col="red")
for (j in 1:4){
num.sim = c(10,100,1000,10000)
num.sim=num.sim[j]
sample.size = 10
sim.means = 0*(1:num.sim)
for (i in 1:num.sim) {
test = runif(sample.size,0,1)
sim.means[i] = mean(test)
}
hist(sim.means,probability=T)
sd=sqrt(1/(12 * sample.size))
curve(dnorm(x,mean=0.5,sd=sd),add=T,col="red")
}
for (j in 1:4){
num.sim = c(10,100,1000,10000)
num.sim=num.sim[j]
sample.size = 10
sim.means = 0*(1:num.sim)
for (i in 1:num.sim) {
test = runif(sample.size,0,1)
sim.means[i] = mean(test)
}
hist(sim.means,probability=T)
sd=sqrt(1/(12 * sample.size))
curve(dnorm(x,mean=0.5,sd=sd),add=T,col="red")
}
for (j in 1:4){
num.sim = c(10,100,1000,10000)
num.sim=num.sim[j]
sample.size = 25
sim.means = 0*(1:num.sim)
for (i in 1:num.sim) {
test = runif(sample.size,0,1)
sim.means[i] = mean(test)
}
hist(sim.means,probability=T)
sd=sqrt(1/(12 * sample.size))
curve(dnorm(x,mean=0.5,sd=sd),add=T,col="red")
}
for (j in 1:4){
num.sim = c(10,100,1000,10000)
num.sim=num.sim[j]
sample.size = 10
sim.means = 0*(1:num.sim)
for (i in 1:num.sim) {
test = runif(sample.size,0,1)
sim.means[i] = mean(test)
}
hist(sim.means,probability=T)
sd=sqrt(1/(12 * sample.size))
curve(dnorm(x,mean=0.5,sd=sd),add=T,col="red")
}
for (j in 1:4){
num.sim = c(10,100,1000,10000)
num.sim=num.sim[j]
sample.size = 25
sim.means = 0*(1:num.sim)
for (i in 1:num.sim) {
test = runif(sample.size,0,1)
sim.means[i] = mean(test)
}
hist(sim.means,probability=T)
sd=sqrt(1/(12 * sample.size))
curve(dnorm(x,mean=0.5,sd=sd),add=T,col="red")
}
par(mfrow=c(2,2))
for (j in 1:4){
num.sim = c(10,100,1000,10000)
num.sim=num.sim[j]
sample.size = 10
sim.means = 0*(1:num.sim)
for (i in 1:num.sim) {
test = runif(sample.size,0,1)
sim.means[i] = mean(test)
}
hist(sim.means,probability=T)
sd=sqrt(1/(12 * sample.size))
curve(dnorm(x,mean=0.5,sd=sd),add=T,col="red")
}
par(mfrow=c(2,2))
for (j in 1:4){
num.sim = c(10,100,1000,10000)
num.sim=num.sim[j]
sample.size = 25
sim.means = 0*(1:num.sim)
for (i in 1:num.sim) {
test = runif(sample.size,0,1)
sim.means[i] = mean(test)
}
hist(sim.means,probability=T)
sd=sqrt(1/(12 * sample.size))
curve(dnorm(x,mean=0.5,sd=sd),add=T,col="red")
}
par(mfrow=c(2,2))
for (j in 1:4){
num.sim = c(10,100,1000,10000)
num.sim=num.sim[j]
sample.size = 10
sim.means = 0*(1:num.sim)
for (i in 1:num.sim) {
test = runif(sample.size,0,1)
sim.means[i] = mean(test)
}
hist(sim.means,probability=T)
sd=sqrt(1/(12 * sample.size))
curve(dnorm(x,mean=0.5,sd=sd),add=T,col="red")
}
par(mfrow=c(2,2))
for (j in 1:4){
num.sim = c(10,100,1000,10000)
num.sim=num.sim[j]
sample.size = 25
sim.means = 0*(1:num.sim)
for (i in 1:num.sim) {
test = runif(sample.size,0,1)
sim.means[i] = mean(test)
}
hist(sim.means,probability=T)
sd=sqrt(1/(12 * sample.size))
curve(dnorm(x,mean=0.5,sd=sd),add=T,col="red")
}
par(mfrow=c(2,2))
for (j in 1:4){
num.sim = c(10,100,1000,10000)
num.sim=num.sim[j]
sample.size = 10
sim.means = 0*(1:num.sim)
for (i in 1:num.sim) {
test = runif(sample.size,0,1)
sim.means[i] = mean(test)
}
hist(sim.means,probability=T,breaks=10)
sd=sqrt(1/(12 * sample.size))
curve(dnorm(x,mean=0.5,sd=sd),add=T,col="red")
}
par(mfrow=c(2,2))
for (j in 1:4){
num.sim = c(10,100,1000,10000)
num.sim=num.sim[j]
sample.size = 25
sim.means = 0*(1:num.sim)
for (i in 1:num.sim) {
test = runif(sample.size,0,1)
sim.means[i] = mean(test)
}
hist(sim.means,probability=T,breaks=10)
sd=sqrt(1/(12 * sample.size))
curve(dnorm(x,mean=0.5,sd=sd),add=T,col="red")
}
num.sim <- 10000
R_values <- numeric(num.sim)
for(i in 1:num.sim){
X1 <- rnorm(1, mean = 0, sd = 1)
X2 <- rnorm(1, mean = 0, sd = 1)
Y  <- rpois(1, lambda = 7)
R_values[i] <- (X1 + X2) / (Y + 1)
}
hist(R_values, probability = TRUE)
lines(density(R_values), col = "red", )
num.sim <- 10000
R_values <- numeric(num.sim)
for(i in 1:num.sim){
X1 <- rnorm(1, mean = 0, sd = 1)
X2 <- rnorm(1, mean = 0, sd = 1)
Y  <- rpois(1, lambda = 7.2)
R_values[i] <- (X1 + X2) / (Y + 1)
}
hist(R_values, probability = TRUE)
lines(density(R_values), col = "red", )
hist(R_values, probability = TRUE,
ylim = c(0,1.5))
num.sim <- 10000
R_values <- numeric(num.sim)
for(i in 1:num.sim){
X1 <- rnorm(1, mean = 0, sd = 1)
X2 <- rnorm(1, mean = 0, sd = 1)
Y  <- rpois(1, lambda = 7.2)
R_values[i] <- (X1 + X2) / (Y + 1)
}
hist(R_values, probability = TRUE,
ylim = c(0,1.5))
lines(density(R_values), col = "red", )
num.sim <- 10000
R_values <- numeric(num.sim)
for(i in 1:num.sim){
X1 <- rnorm(1, mean = 0, sd = 1)
X2 <- rnorm(1, mean = 0, sd = 1)
Y  <- rpois(1, lambda = 7.2)
R_values[i] <- (X1 + X2) / (Y + 1)
}
hist(R_values, probability = TRUE,
ylim = c(0,2))
lines(density(R_values), col = "red", )
num.sim <- 10000
R_values <- numeric(num.sim)
for(i in 1:num.sim){
X1 <- rnorm(1, mean = 0, sd = 1)
X2 <- rnorm(1, mean = 0, sd = 1)
Y  <- rpois(1, lambda = 7.2)
R_values[i] <- (X1 + X2) / (Y + 1)
}
hist(R_values, probability = TRUE,
ylim = c(0,2.2))
lines(density(R_values), col = "red", )
num.sim <- 10000
R_values <- numeric(num.sim)
for(i in 1:num.sim){
X1 <- rnorm(1, mean = 0, sd = 1)
X2 <- rnorm(1, mean = 0, sd = 1)
Y  <- rpois(1, lambda = 7.2)
R_values[i] <- (X1 + X2) / (Y + 1)
}
hist(R_values, probability = TRUE,
ylim = c(0,2.2))
lines(density(R_values), col = "red" )
num.sim <- 10000
R_values <- numeric(num.sim)
for(i in 1:num.sim){
X1 <- rnorm(1, mean = 0, sd = 1)
X2 <- rnorm(1, mean = 0, sd = 1)
Y  <- rpois(1, lambda = 7.2)
R_values[i] <- (X1 + X2) / (Y + 1)
}
hist(R_values, probability = TRUE,
ylim = c(0,2.5))
lines(density(R_values), col = "red" )
num.sim <- 10000
R_A <- numeric(num.sim)
for(i in 1:num.sim){
X1 <- rnorm(1, mean = 0, sd = 1)
X2 <- rnorm(1, mean = 0, sd = 1)
Y  <- rpois(1, lambda = 7.2)
R_A[i] <- (X1 + X2) / (Y + 1)
}
R_B <- numeric(num.sim)
for(i in 1:num.sim){
X1 <- rnorm(1, mean = 0, sd = 1)
X2 <- rnorm(1, mean = 0.3, sd = 1)
Y  <- rpois(1, lambda = 7.2)
R_B[i] <- (X1 + X2) / (Y + 1)
}
par(mfrow=c(1,2))
hist(R_A, probability = TRUE,ylim = c(0,2.2))
hist(R_B, probability = TRUE,ylim = c(0,2.2))
num.sim <- 10000
R_A <- numeric(num.sim)
for(i in 1:num.sim){
X1 <- rnorm(1, mean = 0, sd = 1)
X2 <- rnorm(1, mean = 0, sd = 1)
Y  <- rpois(1, lambda = 7.2)
R_A[i] <- (X1 + X2) / (Y + 1)
}
R_B <- numeric(num.sim)
for(i in 1:num.sim){
X1 <- rnorm(1, mean = 0, sd = 1)
X2 <- rnorm(1, mean = 0.3, sd = 1)
Y  <- rpois(1, lambda = 7.2)
R_B[i] <- (X1 + X2) / (Y + 1)
}
par(mfrow=c(1,2))
hist(R_A, probability = TRUE,ylim = c(0,2.2))
hist(R_B, probability = TRUE,ylim = c(0,2.2))
num.sim <- 10000
R_A <- numeric(num.sim)
for(i in 1:num.sim){
X1 <- rnorm(1, mean = 0, sd = 1)
X2 <- rnorm(1, mean = 0, sd = 1)
Y  <- rpois(1, lambda = 7.2)
R_A[i] <- (X1 + X2) / (Y + 1)
}
R_B <- numeric(num.sim)
for(i in 1:num.sim){
X1 <- rnorm(1, mean = 0, sd = 1)
X2 <- rnorm(1, mean = 0.3, sd = 1)
Y  <- rpois(1, lambda = 7.2)
R_B[i] <- (X1 + X2) / (Y + 1)
}
par(mfrow=c(1,2))
hist(R_A, probability = TRUE,ylim = c(0,2.2))
hist(R_B, probability = TRUE,ylim = c(0,2.2))
p95_A <- quantile(R_A, 0.95)
prop_B_above_95th <- mean(R_B > p95_A)
percent_B_above_95th <- prop_B_above_95th * 100
num.sim <- 10000
R_A <- numeric(num.sim)
for(i in 1:num.sim){
X1 <- rnorm(1, mean = 0, sd = 1)
X2 <- rnorm(1, mean = 0, sd = 1)
Y  <- rpois(1, lambda = 7.2)
R_A[i] <- (X1 + X2) / (Y + 1)
}
R_B <- numeric(num.sim)
for(i in 1:num.sim){
X1 <- rnorm(1, mean = 0, sd = 1)
X2 <- rnorm(1, mean = 0.3, sd = 1)
Y  <- rpois(1, lambda = 7.2)
R_B[i] <- (X1 + X2) / (Y + 1)
}
par(mfrow=c(1,2))
hist(R_A, probability = TRUE,ylim = c(0,2.2))
hist(R_B, probability = TRUE,ylim = c(0,2.2))
p95_A <- quantile(R_A, 0.95)
prop_B_above_95th <- mean(R_B > p95_A)
prop_B_above_95th
library(ggplot2)
library(here)
library(gtsummary)
library(readr)
heart_data <- read_csv("data/heart_failure_clinical_records_dataset.csv")
setwd("~/Desktop/Emory/2025Spring/Data550/Final_project2/scripts")
library(ggplot2)
library(here)
library(gtsummary)
library(readr)
heart_data <- read_csv("data/heart_failure_clinical_records_dataset.csv")
setwd("~/Desktop/Emory/2025Spring/Data550/Final_project2")
library(ggplot2)
library(here)
library(gtsummary)
library(readr)
heart_data <- read_csv("data/heart_failure_clinical_records_dataset.csv")
# Create a box plot
box_plot1 = ggplot(heart_data, aes(x = as.factor(DEATH_EVENT), y = age, fill = as.factor(DEATH_EVENT))) +
geom_boxplot() +
labs(title = "Age by Death Event",
x = "Whether the patient died during the follow-up period",
y = "Age",
fill = "Death Event") +
scale_fill_manual(values = c("0" = "blue", "1" = "red"))
ggsave(filename = "output/my_figure.png", plot = box_plot1)
